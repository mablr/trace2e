searchState.loadedDescShard("trace2e_core", 0, "A distributed traceability middleware.\nTraceability module.\nTransport Module\nStandard M2M API service stack with default component …\nStandard O2M API service stack with default component …\nStandard P2M API service stack parameterized by M2M client …\nExternal-facing APIs for the traceability system.\nTraceability error types and handling.\nInfrastructure primitives for the traceability system.\nInitialize a complete middleware stack for production …\nInitialize a middleware stack with pre-enrolled resources …\nCore services for the traceability middleware.\nMiddleware-to-Middleware (M2M) API service implementation.\nOperator-to-Middleware (O2M) API service implementation.\nProcess-to-Middleware (P2M) API service implementation.\nTraceability API type definitions.\nM2M (Middleware-to-Middleware) API Service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new M2M API service with the provided sequencer, …\nO2M (Operator-to-Middleware) API Service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new O2M API service with the provided provenance …\nP2M (Process-to-Middleware) API Service.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new P2M API service with the provided component …\nEnables or disables resource validation for incoming P2M …\nAcknowledgment of successful request processing.\nAcknowledgment of successful request processing.\nAcknowledgment of successful policy update or …\nCompliance service request types.\nCompliance service response types.\nCompliance policy for a specific destination resource.\nEvaluate whether a proposed data flow complies with all …\nConfirmation that the flow reservation has been …\nConfirmation that the requested flow has been successfully …\nRequest compliance policies for a destination resource …\nRetrieve current compliance policies for a set of …\nRetrieve current compliance policies for multiple …\nRetrieve the current compliance policy for a specific …\nRetrieve the complete provenance lineage for a resource.\nRetrieve the complete provenance lineage for a resource.\nRequest compliance policies for source resources from …\nAuthorization granted for an I/O operation with a unique …\nAuthorization granted for the requested data flow …\nReport the completion status of a previously authorized …\nRequest authorization to perform an I/O operation on a …\nRegister a file resource with the middleware for …\nMiddleware-to-Middleware (M2M) request types.\nMiddleware-to-Middleware (M2M) response types.\nOperator-to-Middleware (O2M) request types.\nOperator-to-Middleware (O2M) response types.\nProcess-to-Middleware (P2M) request types.\nProcess-to-Middleware (P2M) response types.\nCurrent compliance policies for the requested resources.\nCurrent compliance policies for multiple requested …\nCurrent compliance policy for the requested resource.\nNotification that no policy update was needed.\nConfirmation that a policy update was successfully applied.\nComplete provenance lineage for the requested resource.\nNotification that no provenance update was needed.\nProvenance service request types.\nProvenance service response types.\nConfirmation that provenance was successfully updated with …\nComplete provenance lineage for the requested resource.\nRelease a previously reserved flow to allow subsequent …\nRegister a network stream resource with the middleware for …\nReserve exclusive access for a data flow from source to …\nSequencer service request types.\nSequencer service response types.\nSet confidentiality requirements for a specific resource.\nUpdate confidentiality requirements for a specific …\nGrant consent for data processing operations on a resource.\nUpdate consent status for data processing operations on a …\nMark a resource as deleted for compliance and audit …\nMark a resource as deleted for compliance tracking.\nSet integrity level requirements for a specific resource.\nUpdate integrity level requirements for a specific …\nSet a complete compliance policy for a specific resource.\nSet a complete compliance policy for a specific resource.\nCompliance policies for requested source resources.\nUpdate provenance records on the destination middleware …\nRecord a new data flow relationship between source and …\nUpdate destination provenance with pre-computed source …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew confidentiality policy requirements\nConsent status: true to grant, false to revoke\nDestination resource receiving the data\nMinimum required integrity level\nNew complete policy configuration\nTarget resource to apply the policy to\nTarget resource to update\nTarget resource to update\nTarget resource to update consent for\nPolicies for source resources organized by authority node …\nIP address of the authoritative middleware for the source …\nDestination resource where data will be written\nDestination resource receiving the data and provenance …\nSet of source resources to query policies for\nSource resource where data originates\nProvenance data from source resources organized by node ID\nNew confidentiality policy requirements\nMinimum integrity level (higher values indicate stricter …\nNew policy configuration\nTarget resource to apply the policy to\nTarget resource to update\nTarget resource to update\nFile descriptor assigned by the operating system\nFile descriptor assigned by the operating system\nFile descriptor for the target resource\nFile descriptor for the resource\nGrant identifier returned from the corresponding <code>IoRequest</code>\nLocal socket address (e.g., “127.0.0.1:8080”)\nDirection of data flow: true for output (write), false for …\nAbsolute or relative path to the file\nRemote peer socket address (e.g., “192.168.1.100:9000”)\nProcess identifier that opened the file\nProcess identifier that opened the stream\nProcess identifier requesting the operation\nProcess identifier that performed the operation\nOperation outcome: true for success, false for failure\nDestination resource receiving data and provenance updates\nDestination resource to receive the provenance updates\nSource resource providing data\nPre-computed provenance data organized by source node ID\nDestination resource receiving data\nDestination resource to release from reservation\nSource resource providing data\nDestination resource that was part of the released flow\nSource resource that was part of the released flow\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResource naming and identification system.\nRequest validation and filtering for traceability …\nRepresents a file descriptor that can point to either a …\nFile descriptor resource (file or stream)\nRepresents a file resource in the filesystem.\nFile descriptor pointing to a filesystem file\nTrait for services that have a node identifier in …\nNull or uninitialized resource\nRepresents a running system process with identifying …\nProcess resource\nUnified resource identifier for all trackable entities in …\nRepresents a network stream or socket connection.\nFile descriptor pointing to a network stream or socket\nPath to the executable that created this process\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this resource represents a filesystem file.\nChecks if this resource represents a system process.\nReturns the reverse stream resource if this is a stream …\nLocal socket address (e.g., “127.0.0.1:8080”)\nCreates a new file resource with the specified filesystem …\nCreates a new process resource by querying the system for …\nCreates a mock process resource for testing purposes.\nCreates a new stream resource with the specified socket …\nReturns the unique identifier for this node in the …\nFilesystem path to the file, as specified by the …\nRemote peer socket address (e.g., “192.168.1.100:9000”)\nProcess identifier assigned by the operating system\nProcess start time in seconds since epoch for uniqueness\nResource validator for P2M requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates that a process ID corresponds to a currently …\nValidates that socket addresses are well-formed and …\nCompliance Module\nConsent service for managing user/operator consent for …\nThe main compliance service that manages policies and …\nConfidentiality policy defines the level of …\nResource has been fully deleted\nDeletion policy defines the deletion status of a resource.\nResource is active and can participate in flows (default)\nResource is marked for deletion but not yet removed\nPolicy for a resource that controls compliance checking …\nData that can be shared publicly (default)\nData that must be kept confidential and cannot flow to …\nMarks the resource for deletion.\nMarks the deletion as enforced for a resource that is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the resource owner has given consent for …\nReturns the integrity level of the resource.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the resource contains confidential data.\nReturns true if the resource is deleted or pending …\nReturns true if the resource is pending deletion.\nCreates a new policy with the specified parameters.\nUpdates the confidentiality level for this policy.\nUpdates the consent flag for this policy.\nUpdates the integrity level for this policy.\nAcknowledgment of successful consent decision update.\nConsent granted or denied for a data flow.\nConsent service request types.\nConsent service response types.\nRetrieve all pending consent requests.\nList of all pending consent requests.\nRequest consent for a data flow operation.\nSet consent decision for a specific data flow operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ConsentService</code> with the specified timeout.\nConsent decision: true to grant, false to deny\nDestination resource receiving data\nDestination resource receiving data\nSource resource providing data\nSource resource providing data\nProvenance service for tracking resources provenance\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSequencer service for managing resources reservation\nWaiting queue service for managing resources reservation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the remote IP address from an M2M request for …\ngRPC Transport Implementation\nLoopback Transport Implementation\nNo-Op Transport Implementation\nDefault port for gRPC communication between trace2e …\ngRPC client service for machine-to-machine communication.\ngRPC server router that handles incoming requests and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles destination compliance policy requests from remote …\nHandles source compliance policy requests from remote …\nHandles provenance update requests from remote middleware.\nCreates a new router with the specified service handlers.\nCreates a new router with the specified service handlers.\nHandles I/O operation completion reports from processes.\nHandles I/O authorization requests from processes.\nHandles local process enrollment requests.\nHandles remote process enrollment requests.\nProtocol Buffer definitions and descriptor sets for the …\nPre-compiled Protocol Buffer descriptor set for service …\nGenerated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMiddleware to Middleware operations\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMiddleware to Middleware operations\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nCommon Messages\nM2M specific messages\nP2M specific messages\nReturns the enum value of <code>flow</code>, or the default if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets <code>flow</code> to the provided enum value.\nSingle service that handles all middleware operations\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nProcess to Middleware operations\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nSingle service that handles all middleware operations\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nProcess to Middleware operations\nCompress responses with the given encoding, if the client …\nBasic resource types\nEnums\nPolicy-related messages\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the enum value of <code>confidentiality</code>, or the default …\nNested message and enum types in <code>Fd</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Flow</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>Confidentiality</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Flow</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Confidentiality</code>.\nNested message and enum types in <code>Resource</code>.\nSets <code>confidentiality</code> to the provided enum value.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nLoopback transport service for in-process M2M …\nReturns the argument unchanged.\nRetrieves a middleware instance for the specified IP …\nCalls <code>U::from(self)</code>.\nCreates a new loopback transport with the specified delay …\nRegisters a middleware instance with the specified IP …\nSpawns multiple loopback middleware instances with no …\nSpawns multiple loopback middleware instances with …\nSpawns loopback middleware instances with network …\nNo-operation transport service for M2M communication.\nHandles M2M requests by returning appropriate default …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlways reports ready to handle requests immediately.")
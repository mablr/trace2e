syntax = "proto3";

package trace2e.messages;

import "primitives.proto";

// Common Messages
message Ack {}

// P2M specific messages
message LocalCt {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string path = 3;
}

message RemoteCt {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string local_socket = 3;
    string peer_socket = 4;
}

message IoInfo {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    primitives.Flow flow = 3;
}

message IoResult {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string grant_id = 3;
    bool result = 4;
}

message Grant {
    string id = 1;
}

// M2M specific messages
message GetDestinationCompliance {
    primitives.Resource source = 1;
    primitives.Resource destination = 2;
}

message GetSourceCompliance {
    repeated primitives.Resource resources = 1;
}

message DestinationCompliance {
    primitives.Policy policy = 1;
}

message SourceCompliance {
    repeated primitives.MappedPolicy policies = 1;
}

message UpdateProvenance {
    repeated primitives.References source_prov = 1;
    primitives.Resource destination = 2;
}

// O2M specific messages
message GetPoliciesRequest {
    repeated primitives.Resource resources = 1;
}

message GetPoliciesResponse {
    repeated primitives.MappedPolicy policies = 1;
}

message SetPolicyRequest {
    primitives.Resource resource = 1;
    primitives.Policy policy = 2;
}

message SetConfidentialityRequest {
    primitives.Resource resource = 1;
    primitives.Confidentiality confidentiality = 2;
}

message SetIntegrityRequest {
    primitives.Resource resource = 1;
    uint32 integrity = 2;
}

message SetDeletedRequest {
    primitives.Resource resource = 1;
}

message EnforceConsentRequest {
    primitives.Resource resource = 1;
}

message ConsentNotification {
    string log_message = 1;
}

message SetConsentDecisionRequest {
    primitives.Resource source = 1;
    primitives.Resource destination = 2;
    bool decision = 3;
}

message GetReferencesRequest {
    primitives.Resource resource = 1;
}

message GetReferencesResponse {
    repeated primitives.References references = 1;
}

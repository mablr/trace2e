syntax = "proto3";

package trace2e;

import "messages.proto";
import "primitives.proto";

// Single service that handles all middleware operations
service P2m {
    // Process to Middleware operations
    rpc P2MLocalEnroll(messages.LocalCt) returns (messages.Ack);
    rpc P2MRemoteEnroll(messages.RemoteCt) returns (messages.Ack);
    rpc P2MIoRequest(messages.IoInfo) returns (messages.Grant);
    rpc P2MIoReport(messages.IoResult) returns (messages.Ack);

}

service M2m {
    // Middleware to Middleware operations
    rpc M2MDestinationPolicy(messages.GetDestinationPolicy) returns (messages.DestinationPolicy);
    rpc M2MCheckSourceCompliance(messages.CheckSourceCompliance) returns (messages.Ack);
    rpc M2MUpdateProvenance(messages.UpdateProvenance) returns (messages.Ack);
    rpc M2MBroadcastDeletion(primitives.Resource) returns (messages.Ack);
}

service O2m {
    // Operator to Middleware operations
    rpc O2MGetPolicies(messages.GetPoliciesRequest) returns (messages.GetPoliciesResponse);
    rpc O2MSetPolicy(messages.SetPolicyRequest) returns (messages.Ack);
    rpc O2MSetConfidentiality(messages.SetConfidentialityRequest) returns (messages.Ack);
    rpc O2MSetIntegrity(messages.SetIntegrityRequest) returns (messages.Ack);
    rpc O2MSetDeleted(messages.SetDeletedRequest) returns (messages.Ack);
    rpc O2MEnforceConsent(messages.EnforceConsentRequest) returns (stream messages.ConsentNotification);
    rpc O2MSetConsentDecision(messages.SetConsentDecisionRequest) returns (messages.Ack);
    rpc O2MGetReferences(messages.GetReferencesRequest) returns (messages.GetReferencesResponse);
}

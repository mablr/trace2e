syntax = "proto3";

package trace2e;

// Single service that handles all middleware operations
service Trace2e {
    // Process to Middleware operations
    rpc P2MLocalEnroll(LocalCt) returns (Ack);
    rpc P2MRemoteEnroll(RemoteCt) returns (Ack);
    rpc P2MIoRequest(IoInfo) returns (Grant);
    rpc P2MIoReport(IoResult) returns (Ack);
}

// Common Messages
message Ack {}

// P2M specific messages
message LocalCt {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string path = 3;
}

message RemoteCt {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string local_socket = 3;
    string peer_socket = 4;
}

enum Flow {
    FLOW_INPUT = 0;
    FLOW_OUTPUT = 1;
}

message IoInfo {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    Flow flow = 3;
}

message IoResult {
    int32 process_id = 1;
    int32 file_descriptor = 2;
    string grant_id = 3;
    bool result = 4;
}

message Grant {
    string id = 1;
}

diff --git a/tokio/Cargo.toml b/tokio/Cargo.toml
index 86017871..51982765 100644
--- a/tokio/Cargo.toml
+++ b/tokio/Cargo.toml
@@ -87,6 +87,7 @@ time = []
 
 [dependencies]
 tokio-macros = { version = "~2.5.0", path = "../tokio-macros", optional = true }
+trace2e_client = { path = "../../trace2e/trace2e_client" }
 
 pin-project-lite = "0.2.11"
 
diff --git a/tokio/src/fs/file.rs b/tokio/src/fs/file.rs
index 78470664..10915b23 100644
--- a/tokio/src/fs/file.rs
+++ b/tokio/src/fs/file.rs
@@ -275,7 +275,7 @@ impl File {
     /// let file = tokio::fs::File::from_std(std_file);
     /// ```
     pub fn from_std(std: StdFile) -> File {
-        File {
+        let file = File {
             std: Arc::new(std),
             inner: Mutex::new(Inner {
                 state: State::Idle(Some(Buf::with_capacity(0))),
@@ -283,7 +283,21 @@ impl File {
                 pos: 0,
             }),
             max_buf_size: DEFAULT_MAX_BUF_SIZE,
+        };
+        // Use a workaround since path() method is not directly available on std::fs::File
+        // We can skip the path enrollment if we can't get it
+        #[cfg(unix)]
+        {
+            use std::os::unix::io::AsRawFd;
+            if let Ok(path) = std::fs::read_link(format!("/proc/self/fd/{}", file.std.as_raw_fd()))
+            {
+                trace2e_client::local_enroll(
+                    &path,
+                    std::os::fd::AsRawFd::as_raw_fd(&file.std)
+                );
+            }
         }
+        file
     }
 
     /// Attempts to sync all OS-internal metadata to disk.
@@ -587,6 +601,11 @@ impl AsyncRead for File {
         dst: &mut ReadBuf<'_>,
     ) -> Poll<io::Result<()>> {
         ready!(crate::trace::trace_leaf(cx));
+
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
         let me = self.get_mut();
         let inner = me.inner.get_mut();
 
@@ -596,21 +615,32 @@ impl AsyncRead for File {
                     let mut buf = buf_cell.take().unwrap();
 
                     if !buf.is_empty() {
-                        buf.copy_to(dst);
-                        *buf_cell = Some(buf);
-                        return Poll::Ready(Ok(()));
+                        if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Input.into()) {
+                            buf.copy_to(dst);
+                            *buf_cell = Some(buf);
+                            let _ = trace2e_client::io_report(raw_fd, grant_id, true);
+                            return Poll::Ready(Ok(()));
+                        } else {
+                            return Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)));
+                        }
                     }
 
-                    let std = me.std.clone();
+                    if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Input.into()) {
 
-                    let max_buf_size = cmp::min(dst.remaining(), me.max_buf_size);
-                    inner.state = State::Busy(spawn_blocking(move || {
-                        // SAFETY: the `Read` implementation of `std` does not
-                        // read from the buffer it is borrowing and correctly
-                        // reports the length of the data written into the buffer.
-                        let res = unsafe { buf.read_from(&mut &*std, max_buf_size) };
-                        (Operation::Read(res), buf)
-                    }));
+                        let std = me.std.clone();
+
+                        let max_buf_size = cmp::min(dst.remaining(), me.max_buf_size);
+                        inner.state = State::Busy(spawn_blocking(move || {
+                            // SAFETY: the `Read` implementation of `std` does not
+                            // read from the buffer it is borrowing and correctly
+                            // reports the length of the data written into the buffer.
+                            let res = unsafe { buf.read_from(&mut &*std, max_buf_size) };
+                            let _ = trace2e_client::io_report(raw_fd, grant_id, res.is_ok());
+                            (Operation::Read(res), buf)
+                        }));
+                    } else {
+                        return Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)));
+                    }
                 }
                 State::Busy(ref mut rx) => {
                     let (op, mut buf) = ready!(Pin::new(rx).poll(cx))?;
@@ -723,6 +753,11 @@ impl AsyncWrite for File {
         src: &[u8],
     ) -> Poll<io::Result<usize>> {
         ready!(crate::trace::trace_leaf(cx));
+
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
         let me = self.get_mut();
         let inner = me.inner.get_mut();
 
@@ -741,25 +776,29 @@ impl AsyncWrite for File {
                         None
                     };
 
-                    let n = buf.copy_from(src, me.max_buf_size);
-                    let std = me.std.clone();
-
-                    let blocking_task_join_handle = spawn_mandatory_blocking(move || {
-                        let res = if let Some(seek) = seek {
-                            (&*std).seek(seek).and_then(|_| buf.write_to(&mut &*std))
-                        } else {
-                            buf.write_to(&mut &*std)
-                        };
-
-                        (Operation::Write(res), buf)
-                    })
-                    .ok_or_else(|| {
-                        io::Error::new(io::ErrorKind::Other, "background task failed")
-                    })?;
-
-                    inner.state = State::Busy(blocking_task_join_handle);
-
-                    return Poll::Ready(Ok(n));
+                    if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Output.into()) {
+                        let n = buf.copy_from(src, me.max_buf_size);
+                        let std = me.std.clone();
+
+                        let blocking_task_join_handle = spawn_mandatory_blocking(move || {
+                            let res = if let Some(seek) = seek {
+                                (&*std).seek(seek).and_then(|_| buf.write_to(&mut &*std))
+                            } else {
+                                buf.write_to(&mut &*std)
+                            };
+                            let _ = trace2e_client::io_report(raw_fd, grant_id, res.is_ok());
+                            (Operation::Write(res), buf)
+                        })
+                        .ok_or_else(|| {
+                            io::Error::new(io::ErrorKind::Other, "background task failed")
+                        })?;
+
+                        inner.state = State::Busy(blocking_task_join_handle);
+
+                        return Poll::Ready(Ok(n));
+                    } else {
+                        return Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)));
+                    }
                 }
                 State::Busy(ref mut rx) => {
                     let (op, buf) = ready!(Pin::new(rx).poll(cx))?;
@@ -794,6 +833,11 @@ impl AsyncWrite for File {
         bufs: &[io::IoSlice<'_>],
     ) -> Poll<Result<usize, io::Error>> {
         ready!(crate::trace::trace_leaf(cx));
+
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
         let me = self.get_mut();
         let inner = me.inner.get_mut();
 
@@ -812,25 +856,29 @@ impl AsyncWrite for File {
                         None
                     };
 
-                    let n = buf.copy_from_bufs(bufs, me.max_buf_size);
-                    let std = me.std.clone();
-
-                    let blocking_task_join_handle = spawn_mandatory_blocking(move || {
-                        let res = if let Some(seek) = seek {
-                            (&*std).seek(seek).and_then(|_| buf.write_to(&mut &*std))
-                        } else {
-                            buf.write_to(&mut &*std)
-                        };
-
-                        (Operation::Write(res), buf)
-                    })
-                    .ok_or_else(|| {
-                        io::Error::new(io::ErrorKind::Other, "background task failed")
-                    })?;
-
-                    inner.state = State::Busy(blocking_task_join_handle);
-
-                    return Poll::Ready(Ok(n));
+                    if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Output.into()) {
+                        let n = buf.copy_from_bufs(bufs, me.max_buf_size);
+                        let std = me.std.clone();
+
+                        let blocking_task_join_handle = spawn_mandatory_blocking(move || {
+                            let res = if let Some(seek) = seek {
+                                (&*std).seek(seek).and_then(|_| buf.write_to(&mut &*std))
+                            } else {
+                                buf.write_to(&mut &*std)
+                            };
+                            let _ = trace2e_client::io_report(raw_fd, grant_id, res.is_ok());
+                            (Operation::Write(res), buf)
+                        })
+                        .ok_or_else(|| {
+                            io::Error::new(io::ErrorKind::Other, "background task failed")
+                        })?;
+
+                        inner.state = State::Busy(blocking_task_join_handle);
+
+                        return Poll::Ready(Ok(n));
+                    } else {
+                        return Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)));
+                    }
                 }
                 State::Busy(ref mut rx) => {
                     let (op, buf) = ready!(Pin::new(rx).poll(cx))?;
diff --git a/tokio/src/fs/open_options.rs b/tokio/src/fs/open_options.rs
index e70e6aa0..72cce263 100644
--- a/tokio/src/fs/open_options.rs
+++ b/tokio/src/fs/open_options.rs
@@ -388,8 +388,12 @@ impl OpenOptions {
     pub async fn open(&self, path: impl AsRef<Path>) -> io::Result<File> {
         let path = path.as_ref().to_owned();
         let opts = self.0.clone();
-
+        let path_clone = path.clone();
         let std = asyncify(move || opts.open(path)).await?;
+        trace2e_client::local_enroll(
+            path_clone,
+            std::os::fd::AsRawFd::as_raw_fd(&std)
+        );
         Ok(File::from_std(std))
     }
 
diff --git a/tokio/src/net/tcp/listener.rs b/tokio/src/net/tcp/listener.rs
index 1545e654..aa0ef57f 100644
--- a/tokio/src/net/tcp/listener.rs
+++ b/tokio/src/net/tcp/listener.rs
@@ -166,6 +166,11 @@ impl TcpListener {
             .await?;
 
         let stream = TcpStream::new(mio)?;
+        trace2e_client::remote_enroll(
+            std::os::fd::AsRawFd::as_raw_fd(&stream),
+            stream.local_addr()?.to_string(),
+            addr.to_string()
+        );
         Ok((stream, addr))
     }
 
@@ -182,6 +187,11 @@ impl TcpListener {
             match self.io.accept() {
                 Ok((io, addr)) => {
                     let io = TcpStream::new(io)?;
+                    trace2e_client::remote_enroll(
+                        std::os::fd::AsRawFd::as_raw_fd(&io),
+                        io.local_addr()?.to_string(),
+                        addr.to_string()
+                    );
                     return Poll::Ready(Ok((io, addr)));
                 }
                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {
diff --git a/tokio/src/net/tcp/stream.rs b/tokio/src/net/tcp/stream.rs
index 0504bf2e..a6dd39b8 100644
--- a/tokio/src/net/tcp/stream.rs
+++ b/tokio/src/net/tcp/stream.rs
@@ -152,6 +152,11 @@ impl TcpStream {
                 return Err(e);
             }
 
+            trace2e_client::remote_enroll(
+                std::os::fd::AsRawFd::as_raw_fd(&stream),
+                stream.local_addr()?.to_string(),
+                stream.peer_addr()?.to_string()
+            );
             Ok(stream)
         }
     }
@@ -200,6 +205,11 @@ impl TcpStream {
     /// explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.
     #[track_caller]
     pub fn from_std(stream: std::net::TcpStream) -> io::Result<TcpStream> {
+        trace2e_client::remote_enroll(
+            std::os::fd::AsRawFd::as_raw_fd(&stream),
+            stream.local_addr()?.to_string(),
+            stream.peer_addr()?.to_string()
+        );
         let io = mio::net::TcpStream::from_std(stream);
         let io = PollEvented::new(io)?;
         Ok(TcpStream { io })
@@ -1329,7 +1339,18 @@ impl AsyncRead for TcpStream {
         cx: &mut Context<'_>,
         buf: &mut ReadBuf<'_>,
     ) -> Poll<io::Result<()>> {
-        self.poll_read_priv(cx, buf)
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
+        if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Input.into()) {
+            let poll = self.poll_read_priv(cx, buf);
+            // TODO : report the result correctly
+            let _ = trace2e_client::io_report(raw_fd, grant_id, true);
+            poll
+        } else {
+            Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)))
+        }
     }
 }
 
@@ -1339,7 +1360,18 @@ impl AsyncWrite for TcpStream {
         cx: &mut Context<'_>,
         buf: &[u8],
     ) -> Poll<io::Result<usize>> {
-        self.poll_write_priv(cx, buf)
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
+        if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Output.into()) {
+            let poll = self.poll_write_priv(cx, buf);
+            // TODO : report the result correctly
+            let _ = trace2e_client::io_report(raw_fd, grant_id, true);
+            poll
+        } else {
+            Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)))
+        }
     }
 
     fn poll_write_vectored(
@@ -1347,7 +1379,18 @@ impl AsyncWrite for TcpStream {
         cx: &mut Context<'_>,
         bufs: &[io::IoSlice<'_>],
     ) -> Poll<io::Result<usize>> {
-        self.poll_write_vectored_priv(cx, bufs)
+        let raw_fd = {
+            use std::os::fd::AsRawFd;
+            self.as_raw_fd()
+        };
+        if let Ok(grant_id) = trace2e_client::io_request(raw_fd, trace2e_client::Flow::Output.into()) {
+            let poll = self.poll_write_vectored_priv(cx, bufs);
+            // TODO : report the result correctly
+            let _ = trace2e_client::io_report(raw_fd, grant_id, true);
+            poll
+        } else {
+            Poll::Ready(Err(std::io::Error::from(std::io::ErrorKind::PermissionDenied)))
+        }
     }
 
     fn is_write_vectored(&self) -> bool {
